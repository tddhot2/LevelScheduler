//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 7 files.
  struct file {
    /// Resource file `gray.png`.
    static let grayPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gray", pathExtension: "png")
    /// Resource file `green.png`.
    static let greenPng = Rswift.FileResource(bundle: R.hostingBundle, name: "green", pathExtension: "png")
    /// Resource file `orange.png`.
    static let orangePng = Rswift.FileResource(bundle: R.hostingBundle, name: "orange", pathExtension: "png")
    /// Resource file `purple.png`.
    static let purplePng = Rswift.FileResource(bundle: R.hostingBundle, name: "purple", pathExtension: "png")
    /// Resource file `red.png`.
    static let redPng = Rswift.FileResource(bundle: R.hostingBundle, name: "red", pathExtension: "png")
    /// Resource file `sky.png`.
    static let skyPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sky", pathExtension: "png")
    /// Resource file `white.png`.
    static let whitePng = Rswift.FileResource(bundle: R.hostingBundle, name: "white", pathExtension: "png")
    
    /// `bundle.url(forResource: "gray", withExtension: "png")`
    static func grayPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.grayPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "green", withExtension: "png")`
    static func greenPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.greenPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "orange", withExtension: "png")`
    static func orangePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.orangePng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "purple", withExtension: "png")`
    static func purplePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.purplePng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "red", withExtension: "png")`
    static func redPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.redPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "sky", withExtension: "png")`
    static func skyPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.skyPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "white", withExtension: "png")`
    static func whitePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.whitePng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `SchedulerTableCell`.
    static let schedulerTableCell: Rswift.ReuseIdentifier<SchedulerTableViewCell> = Rswift.ReuseIdentifier(identifier: "SchedulerTableCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Start`.
    static let start = _R.storyboard.start()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Start", bundle: ...)`
    static func start(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.start)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try start.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct start: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Start"
      let startSettingViewController = StoryboardViewControllerResource<StartSettingViewController>(identifier: "StartSettingViewController")
      
      func startSettingViewController(_: Void = ()) -> StartSettingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: startSettingViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.start().startSettingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'startSettingViewController' could not be loaded from storyboard 'Start' as 'StartSettingViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
